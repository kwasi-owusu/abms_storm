// Generated by data binding compiler. Do not edit!
package com.woleapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatSpinner;
import androidx.cardview.widget.CardView;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import com.woleapp.R;
import com.woleapp.model.Inventory;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class LayoutAddInventoryBinding extends ViewDataBinding {
  @NonNull
  public final Button btnContinue;

  @NonNull
  public final Button btnUpload;

  @NonNull
  public final CardView cardToggle;

  @NonNull
  public final EditText etNote;

  @NonNull
  public final EditText etPrice;

  @NonNull
  public final EditText etProductName;

  @NonNull
  public final EditText etSize;

  @NonNull
  public final ImageView ivProduct;

  @NonNull
  public final AppCompatSpinner spnCategory;

  @NonNull
  public final AppCompatSpinner spnColor;

  @NonNull
  public final EditText spnQuantity;

  @NonNull
  public final TextView tvQuantity;

  @NonNull
  public final TextView tvTitle;

  @Bindable
  protected Inventory mInventory;

  @Bindable
  protected Boolean mIsOpen;

  protected LayoutAddInventoryBinding(Object _bindingComponent, View _root, int _localFieldCount,
      Button btnContinue, Button btnUpload, CardView cardToggle, EditText etNote, EditText etPrice,
      EditText etProductName, EditText etSize, ImageView ivProduct, AppCompatSpinner spnCategory,
      AppCompatSpinner spnColor, EditText spnQuantity, TextView tvQuantity, TextView tvTitle) {
    super(_bindingComponent, _root, _localFieldCount);
    this.btnContinue = btnContinue;
    this.btnUpload = btnUpload;
    this.cardToggle = cardToggle;
    this.etNote = etNote;
    this.etPrice = etPrice;
    this.etProductName = etProductName;
    this.etSize = etSize;
    this.ivProduct = ivProduct;
    this.spnCategory = spnCategory;
    this.spnColor = spnColor;
    this.spnQuantity = spnQuantity;
    this.tvQuantity = tvQuantity;
    this.tvTitle = tvTitle;
  }

  public abstract void setInventory(@Nullable Inventory inventory);

  @Nullable
  public Inventory getInventory() {
    return mInventory;
  }

  public abstract void setIsOpen(@Nullable Boolean isOpen);

  @Nullable
  public Boolean getIsOpen() {
    return mIsOpen;
  }

  @NonNull
  public static LayoutAddInventoryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.layout_add_inventory, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static LayoutAddInventoryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<LayoutAddInventoryBinding>inflateInternal(inflater, R.layout.layout_add_inventory, root, attachToRoot, component);
  }

  @NonNull
  public static LayoutAddInventoryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.layout_add_inventory, null, false, component)
   */
  @NonNull
  @Deprecated
  public static LayoutAddInventoryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<LayoutAddInventoryBinding>inflateInternal(inflater, R.layout.layout_add_inventory, null, false, component);
  }

  public static LayoutAddInventoryBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static LayoutAddInventoryBinding bind(@NonNull View view, @Nullable Object component) {
    return (LayoutAddInventoryBinding)bind(component, view, R.layout.layout_add_inventory);
  }
}
